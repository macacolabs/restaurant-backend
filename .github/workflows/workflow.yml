name: Build and Push Spring Boot Docker Image

on:
  push:
    branches: [main]

jobs:
  docker-build-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Restore application-dev.yml
        run: echo "$APPLICATION_DEV_YML" | base64 -d > src/main/resources/application.yml
        env:
          APPLICATION_DEV_YML: ${{ secrets.APPLICATION_DEV_YML }}
 
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Grant execute permission to gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test --no-daemon

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/springboot-api:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/springboot-api:latest

      - name: Create Dockerrun.aws.json
        run: |
             echo '{
                "AWSEBDockerrunVersion": 1,
                "Image": {
                 "Name": "${{ secrets.DOCKER_USERNAME }}/springboot-api:latest",
                 "Update": "true"
                },
                "Ports": [
                  { "ContainerPort": 8080 }
                ]
             }' > Dockerrun.aws.json
      - name: Zip for deployment
        run : zip -r app.zip Dockerrun.aws.json
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3 and deploy to EB
        run: |
          VERSION_LABEL=v${{ github.run_number }}
          
          aws s3 cp app.zip s3://${{ secrets.S3_BUCKET_NAME }}/app.zip
          
          aws elasticbeanstalk create-application-version \
            --application-name ${{ secrets.EB_APP_NAME }} \
            --version-label $VERSION_LABEL \
            --source-bundle S3Bucket=${{ secrets.S3_BUCKET_NAME }},S3Key=app.zip
          
          aws elasticbeanstalk update-environment \
            --environment-name ${{ secrets.EB_ENV_NAME }} \
            --version-label $VERSION_LABEL


